import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { 
  TradingPosition, 
  TradingSignal, 
  TradingStats, 
  TradingConfig 
} from '../../interfaces/trading.interface';
import { SidewaysPattern } from '../../interfaces/analysis.interface';
import { BTCTrendService } from './btc-trend.service';
import { OrderBookAnalysisService } from '../analysis/orderbook-analysis.service';
import { SignalService, TradingSignal as GoogleSheetsSignal } from '../../shared';
import { v4 as uuidv4 } from 'uuid';

@Injectable()
export class TradingService {
  private readonly logger = new Logger(TradingService.name);
  private readonly config: TradingConfig;
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
  private readonly openPositions: Map<string, TradingPosition> = new Map();
  
  // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  private readonly closedPositions: TradingPosition[] = [];
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  private stats: TradingStats = {
    totalTrades: 0,
    openTrades: 0,
    closedTrades: 0,
    winTrades: 0,
    lossTrades: 0,
    winRate: 0,
    totalPnl: 0,
    averagePnl: 0,
    maxWin: 0,
    maxLoss: 0,
  };

  constructor(
    private configService: ConfigService,
    private btcTrendService: BTCTrendService,
    private orderBookService: OrderBookAnalysisService,
    private signalService: SignalService,
  ) {
    this.config = {
      enabled: this.configService.get<boolean>('trading.enabled', true),
      takeProfitPercent: this.configService.get<number>('trading.takeProfitPercent', 2.0), // 2%
      stopLossPercent: this.configService.get<number>('trading.stopLossPercent', 2.0), // 2% (—Ä–∞–≤–Ω–æ –¢–ü)
      maxPositionsPerSymbol: this.configService.get<number>('trading.maxPositionsPerSymbol', 1),
      maxTotalPositions: this.configService.get<number>('trading.maxTotalPositions', 10),
    };
    
    this.logger.log(`Trading Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: TP=${this.config.takeProfitPercent}%, SL=${this.config.stopLossPercent}%`);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–æ–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
   */
  async processSidewaysPattern(pattern: SidewaysPattern, currentPrice: number): Promise<TradingSignal | null> {
    if (!this.config.enabled) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–∑–∏—Ü–∏–π
    if (!this.canOpenPosition(pattern.symbol)) {
      this.logger.debug(`${pattern.symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π`);
      return null;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    let direction: 'LONG' | 'SHORT';
    let reason: string;
    
    if (pattern.direction === 'low_to_high_to_low') {
      // –¶–µ–Ω–∞ –±—ã–ª–∞ –≤–Ω–∏–∑—É, –ø–æ—à–ª–∞ –≤–≤–µ—Ä—Ö, –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤–Ω–∏–∑ - –ø–æ–∫—É–ø–∞–µ–º –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ
      direction = 'LONG';
      reason = `–ë–æ–∫–æ–≤–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –Ω–∏–∑—É (${pattern.startPrice.toFixed(6)} ‚Üí ${pattern.middlePrice.toFixed(6)} ‚Üí ${currentPrice.toFixed(6)})`;
    } else {
      // –¶–µ–Ω–∞ –±—ã–ª–∞ –≤–≤–µ—Ä—Ö—É, –ø–æ—à–ª–∞ –≤–Ω–∏–∑, –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤–≤–µ—Ä—Ö - –ø—Ä–æ–¥–∞–µ–º –Ω–∞ –æ—Ç—Å–∫–æ–∫–µ
      direction = 'SHORT';
      reason = `–ë–æ–∫–æ–≤–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ –≤–µ—Ä—Ö—É (${pattern.startPrice.toFixed(6)} ‚Üí ${pattern.middlePrice.toFixed(6)} ‚Üí ${currentPrice.toFixed(6)})`;
    }

    // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    const existingPosition = this.getPositionBySymbol(pattern.symbol);
    if (existingPosition && existingPosition.direction !== direction) {
      // –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
      this.closePositionByReversal(existingPosition, currentPrice, `–°–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞: ${existingPosition.direction} ‚Üí ${direction}`);
      this.logger.log(
        `üîÑ –°–ú–ï–ù–ê –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø [${existingPosition.direction} ‚Üí ${direction}] ${pattern.symbol} | ` +
        `–°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ ${currentPrice.toFixed(6)}`
      );
    }

    // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC —Ç—Ä–µ–Ω–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const btcTrendAnalysis = this.btcTrendService.getBTCTrendAnalysis();
    
    if (!this.btcTrendService.isDirectionAllowed(direction)) {
      const btcTrend = btcTrendAnalysis?.trend || 'UNKNOWN';
      this.logger.log(
        `üö´ –°–î–ï–õ–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê [${direction}] ${pattern.symbol} | ` +
        `BTC —Ç—Ä–µ–Ω–¥: ${btcTrend} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ${direction} –ø–æ–∑–∏—Ü–∏—é | ` +
        `EMA20: ${btcTrendAnalysis?.ema20.toFixed(2)} vs EMA50: ${btcTrendAnalysis?.ema50.toFixed(2)}`
      );
      return null;
    }

    // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º Order Book –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try {
      const orderBookAnalysis = await this.orderBookService.getOrderBookAnalysis(pattern.symbol);
      const orderBookSupport = this.orderBookService.isDirectionSupported(direction, orderBookAnalysis);
      
      if (!orderBookSupport) {
        this.logger.log(
          `üìö –°–î–ï–õ–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê [${direction}] ${pattern.symbol} | ` +
          `Order Book –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ | ` +
          `BID/ASK: ${orderBookAnalysis.bidAskRatio.toFixed(2)} | ` +
          `BID: $${(orderBookAnalysis.totalBidVolume/1000).toFixed(0)}k | ` +
          `ASK: $${(orderBookAnalysis.totalAskVolume/1000).toFixed(0)}k`
        );
        return null;
      }

      // Order Book –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
      this.logger.log(
        `üìö ORDER BOOK –ü–û–î–¢–í–ï–†–ñ–î–ê–ï–¢ [${direction}] ${pattern.symbol} | ` +
        `BID/ASK: ${orderBookAnalysis.bidAskRatio.toFixed(2)} | ` +
        `Strength: ${orderBookAnalysis.strength} | ` +
        `${direction === 'LONG' ? 'Bullish' : 'Bearish'} signal: ${direction === 'LONG' ? orderBookAnalysis.bullishSignal : orderBookAnalysis.bearishSignal}`
      );

    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Order Book –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è ${pattern.symbol}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ`);
    }

    // BTC —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–¥–µ–ª–∫—É!
    const btcConfirmation = btcTrendAnalysis 
      ? `BTC ${btcTrendAnalysis.trend} (EMA20: ${btcTrendAnalysis.ema20.toFixed(2)} vs EMA50: ${btcTrendAnalysis.ema50.toFixed(2)})`
      : 'BTC —Ç—Ä–µ–Ω–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω';

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ TP –∏ SL
    const takeProfitPrice = direction === 'LONG' 
      ? currentPrice * (1 + this.config.takeProfitPercent / 100)
      : currentPrice * (1 - this.config.takeProfitPercent / 100);
      
    const stopLossPrice = direction === 'LONG'
      ? currentPrice * (1 - this.config.stopLossPercent / 100)
      : currentPrice * (1 + this.config.stopLossPercent / 100);

    const signal: TradingSignal = {
      symbol: pattern.symbol,
      direction,
      entryPrice: currentPrice,
      timestamp: Date.now(),
      reason: `${reason} | ${btcConfirmation}`,
      takeProfitPrice: Number(takeProfitPrice.toFixed(8)),
      stopLossPrice: Number(stopLossPrice.toFixed(8)),
      sidewaysPattern: pattern,
    };

    return signal;
  }

  /**
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–≥–Ω–∞–ª—É
   */
  openPosition(signal: TradingSignal): TradingPosition {
    const position: TradingPosition = {
      id: uuidv4(),
      symbol: signal.symbol,
      direction: signal.direction,
      entryPrice: signal.entryPrice,
      entryTime: signal.timestamp,
      currentPrice: signal.entryPrice,
      takeProfitPrice: signal.takeProfitPrice,
      stopLossPrice: signal.stopLossPrice,
      status: 'OPEN',
      unrealizedPnl: 0,
      triggerReason: signal.reason,
    };

    this.openPositions.set(position.id, position);
    this.stats.totalTrades++;
    this.stats.openTrades++;
    
    this.logger.log(`üî• –ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê [${position.direction}] ${position.symbol} –ø–æ ${this.formatPrice(position.entryPrice)} | TP: ${this.formatPrice(position.takeProfitPrice)} | SL: ${this.formatPrice(position.stopLossPrice)}`);
    this.logger.log(`üìä –ü—Ä–∏—á–∏–Ω–∞: ${position.triggerReason}`);

    // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ Google Sheets
    this.saveSignalToGoogleSheets(signal, position);

    return position;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
   */
  updatePositions(symbol: string, currentPrice: number): void {
    const symbolPositions = Array.from(this.openPositions.values())
      .filter(pos => pos.symbol === symbol && pos.status === 'OPEN');

    for (const position of symbolPositions) {
      this.updatePosition(position, currentPrice);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
   */
  private updatePosition(position: TradingPosition, currentPrice: number): void {
    const oldPrice = position.currentPrice;
    position.currentPrice = currentPrice;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
    if (position.direction === 'LONG') {
      position.unrealizedPnl = ((currentPrice - position.entryPrice) / position.entryPrice) * 100;
    } else {
      position.unrealizedPnl = ((position.entryPrice - currentPrice) / position.entryPrice) * 100;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
    let shouldClose = false;
    let closeReason = '';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
    if (position.direction === 'LONG' && currentPrice >= position.takeProfitPrice) {
      shouldClose = true;
      closeReason = 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
      position.status = 'CLOSED_TP';
    } else if (position.direction === 'SHORT' && currentPrice <= position.takeProfitPrice) {
      shouldClose = true;
      closeReason = 'Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç';
      position.status = 'CLOSED_TP';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
    if (position.direction === 'LONG' && currentPrice <= position.stopLossPrice) {
      shouldClose = true;
      closeReason = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
      position.status = 'CLOSED_SL';
    } else if (position.direction === 'SHORT' && currentPrice >= position.stopLossPrice) {
      shouldClose = true;
      closeReason = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
      position.status = 'CLOSED_SL';
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (shouldClose) {
      this.closePosition(position, currentPrice, closeReason);
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ PnL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      const priceChangePercent = Math.abs((currentPrice - oldPrice) / oldPrice) * 100;
      if (priceChangePercent > 0.1) { // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.1%
        this.logger.debug(`üíπ ${position.symbol} [${position.direction}] PnL: ${position.unrealizedPnl.toFixed(2)}% | –¶–µ–Ω–∞: ${this.formatPrice(currentPrice)}`);
      }
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é
   */
  private closePosition(position: TradingPosition, closePrice: number, reason: string): void {
    position.closedPrice = closePrice;
    position.closedTime = Date.now();
    position.closeReason = reason;
    position.realizedPnl = position.unrealizedPnl;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.openTrades--;
    this.stats.closedTrades++;
    
    if (position.realizedPnl > 0) {
      this.stats.winTrades++;
      if (position.realizedPnl > this.stats.maxWin) {
        this.stats.maxWin = position.realizedPnl;
      }
    } else {
      this.stats.lossTrades++;
      if (position.realizedPnl < this.stats.maxLoss) {
        this.stats.maxLoss = position.realizedPnl;
      }
    }

    this.stats.totalPnl += position.realizedPnl;
    this.stats.winRate = (this.stats.winTrades / this.stats.closedTrades) * 100;
    this.stats.averagePnl = this.stats.totalPnl / this.stats.closedTrades;

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.closedPositions.push({ ...position });
    this.openPositions.delete(position.id);

    const emoji = position.status === 'CLOSED_TP' ? '‚úÖ' : '‚ùå';
    const pnlColor = position.realizedPnl > 0 ? '+' : '';
    
    this.logger.log(`${emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê [${position.direction}] ${position.symbol} | ${pnlColor}${position.realizedPnl.toFixed(2)}% | ${reason}`);
    this.logger.log(`üìà –í—Ö–æ–¥: ${this.formatPrice(position.entryPrice)} ‚Üí –í—ã—Ö–æ–¥: ${this.formatPrice(closePrice)}`);
    
    // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Sheets
    this.updateSignalResultInGoogleSheets(position);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    if (this.stats.closedTrades % 5 === 0) {
      this.logTradingStats();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–∏–º–≤–æ–ª–∞
   */
  private canOpenPosition(symbol: string): boolean {
    const symbolPositions = Array.from(this.openPositions.values())
      .filter(pos => pos.symbol === symbol).length;
    
    // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–∑–∏—Ü–∏–π - —Ç–µ–ø–µ—Ä—å –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å–∏–º–≤–æ–ª—É
    return symbolPositions < this.config.maxPositionsPerSymbol;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
   */
  getTradingStats(): TradingStats {
    return { ...this.stats };
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  logTradingStats(): void {
    this.logger.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò:`);
    this.logger.log(`   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${this.stats.totalTrades} | –û—Ç–∫—Ä—ã—Ç–æ: ${this.stats.openTrades} | –ó–∞–∫—Ä—ã—Ç–æ: ${this.stats.closedTrades}`);
    if (this.stats.closedTrades > 0) {
      this.logger.log(`   –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: ${this.stats.winTrades} | –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: ${this.stats.lossTrades} | Win Rate: ${this.stats.winRate.toFixed(1)}%`);
      this.logger.log(`   –û–±—â–∏–π PnL: ${this.stats.totalPnl.toFixed(2)}% | –°—Ä–µ–¥–Ω–∏–π PnL: ${this.stats.averagePnl.toFixed(2)}%`);
      this.logger.log(`   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: +${this.stats.maxWin.toFixed(2)}% | –•—É–¥—à–∞—è: ${this.stats.maxLoss.toFixed(2)}%`);
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
   */
  getOpenPositions(): TradingPosition[] {
    return Array.from(this.openPositions.values());
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
   */
  getClosedPositions(): TradingPosition[] {
    return [...this.closedPositions];
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
   */
  getPositionBySymbol(symbol: string): TradingPosition | null {
    const positions = Array.from(this.openPositions.values()).filter(pos => pos.symbol === symbol);
    return positions.length > 0 ? positions[0] : null;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
   */
  getPositionsBySymbol(symbol: string): TradingPosition[] {
    return Array.from(this.openPositions.values()).filter(pos => pos.symbol === symbol);
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–Ω–¥–∞
   */
  private closePositionByReversal(position: TradingPosition, closePrice: number, reason: string): void {
    position.closedPrice = closePrice;
    position.closedTime = Date.now();
    position.closeReason = reason;
    position.status = 'CLOSED_SL'; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é –ø–æ –≤–Ω–µ—à–Ω–µ–π –ø—Ä–∏—á–∏–Ω–µ
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL
    if (position.direction === 'LONG') {
      position.realizedPnl = ((closePrice - position.entryPrice) / position.entryPrice) * 100;
    } else {
      position.realizedPnl = ((position.entryPrice - closePrice) / position.entryPrice) * 100;
    }
    
    position.unrealizedPnl = position.realizedPnl;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.stats.openTrades--;
    this.stats.closedTrades++;
    
    if (position.realizedPnl > 0) {
      this.stats.winTrades++;
      if (position.realizedPnl > this.stats.maxWin) {
        this.stats.maxWin = position.realizedPnl;
      }
    } else {
      this.stats.lossTrades++;
      if (position.realizedPnl < this.stats.maxLoss) {
        this.stats.maxLoss = position.realizedPnl;
      }
    }

    this.stats.totalPnl += position.realizedPnl;
    this.stats.winRate = this.stats.closedTrades > 0 ? (this.stats.winTrades / this.stats.closedTrades) * 100 : 0;
    this.stats.averagePnl = this.stats.closedTrades > 0 ? this.stats.totalPnl / this.stats.closedTrades : 0;

    // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.closedPositions.push({ ...position });
    this.openPositions.delete(position.id);

    const emoji = position.realizedPnl > 0 ? 'üîÑ‚úÖ' : 'üîÑ‚ùå';
    const pnlColor = position.realizedPnl > 0 ? '+' : '';
    
    this.logger.log(`${emoji} –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê –ü–û –°–ú–ï–ù–ï –¢–†–ï–ù–î–ê [${position.direction}] ${position.symbol} | ${pnlColor}${position.realizedPnl.toFixed(2)}% | ${reason}`);
    this.logger.log(`üìà –í—Ö–æ–¥: ${this.formatPrice(position.entryPrice)} ‚Üí –í—ã—Ö–æ–¥: ${this.formatPrice(closePrice)}`);
    
    // üÜï –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Sheets
    this.updateSignalResultInGoogleSheets(position);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ Google Sheets
   */
  private async saveSignalToGoogleSheets(signal: TradingSignal, position: TradingPosition): Promise<void> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ reason
      const hasVP = true; // –£ –Ω–∞—Å –µ—Å—Ç—å –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (volume profile)
      const hasBTC = signal.reason.includes('BTC');
      const hasOrderBook = signal.reason.includes('Order Book') || signal.reason.includes('ORDER BOOK');

      const googleSheetsSignal: GoogleSheetsSignal = {
        date: new Date().toISOString().split('T')[0], // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        symbol: signal.symbol,
        VP: hasVP,
        BTC: hasBTC,
        orderBook: hasOrderBook,
        open: signal.entryPrice,
        side: signal.direction.toLowerCase() as 'long' | 'short',
        tp: signal.takeProfitPrice,
        sl: signal.stopLossPrice,
      };

      await this.signalService.createTradingSignal(googleSheetsSignal, 'page');
      
      this.logger.log(`üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets: ${signal.symbol} ${signal.direction}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ Google Sheets: ${error.message}`);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ Google Sheets –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
   */
  private async updateSignalResultInGoogleSheets(position: TradingPosition): Promise<void> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ triggerReason
      const hasVP = true; // –£ –Ω–∞—Å –µ—Å—Ç—å –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (volume profile)
      const hasBTC = position.triggerReason?.includes('BTC') || false;
      const hasOrderBook = position.triggerReason?.includes('Order Book') || position.triggerReason?.includes('ORDER BOOK') || false;

      const googleSheetsSignal: GoogleSheetsSignal = {
        date: new Date(position.entryTime).toISOString().split('T')[0], // –î–∞—Ç–∞ –≤—Ö–æ–¥–∞
        symbol: position.symbol,
        VP: hasVP,
        BTC: hasBTC,
        orderBook: hasOrderBook,
        open: position.entryPrice,
        side: position.direction.toLowerCase() as 'long' | 'short',
        tp: position.takeProfitPrice,
        sl: position.stopLossPrice,
        result: position.realizedPnl, // –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
      };

      await this.signalService.updateTradingSignalResult(googleSheetsSignal, 'page');
      
      this.logger.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets: ${position.symbol} ${position.realizedPnl?.toFixed(2)}%`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ Google Sheets: ${error.message}`);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatPrice(price: number): string {
    if (price >= 1000) {
      return price.toFixed(2);
    } else if (price >= 1) {
      return price.toFixed(4);
    } else if (price >= 0.01) {
      return price.toFixed(6);
    } else {
      return price.toFixed(8);
    }
  }
}
